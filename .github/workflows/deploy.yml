name: Deploy Scheduly Frontend to S3

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Create production environment file
        run: |
          echo "VITE_API_URL=https://60eoov8mmg.execute-api.sa-east-1.amazonaws.com/prod/appointments" > .env.production

      - name: Build project
        run: npm run build
        env:
          VITE_API_URL: https://60eoov8mmg.execute-api.sa-east-1.amazonaws.com/prod/appointments

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }} --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"
          
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }} \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --content-type "text/html; charset=utf-8"
          
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }} \
            --cache-control "no-cache,no-store,must-revalidate" \
            --include "service-worker.js" \
            --include "manifest.json"

      - name: Configure S3 bucket for static website hosting
        run: |
          aws s3 website s3://${{ secrets.AWS_S3_BUCKET }} --index-document index.html --error-document index.html
          
          aws s3api put-bucket-cors --bucket ${{ secrets.AWS_S3_BUCKET }} --cors-configuration '{
            "CORSRules": [
              {
                "AllowedOrigins": ["*"],
                "AllowedMethods": ["GET", "HEAD"],
                "AllowedHeaders": ["*"],
                "MaxAgeSeconds": 3000
              }
            ]
          }'
          
          aws s3api put-bucket-policy --bucket ${{ secrets.AWS_S3_BUCKET }} --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ secrets.AWS_S3_BUCKET }}/*"
              }
            ]
          }'
          
          aws s3api put-public-access-block --bucket ${{ secrets.AWS_S3_BUCKET }} --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
          